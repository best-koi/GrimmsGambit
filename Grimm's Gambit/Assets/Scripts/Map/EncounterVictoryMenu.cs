using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;

public class EncounterVictoryMenu : MonoBehaviour
{
    public Deck currentDeck;
    public CardDatabase cardDatabase;
    //To be clear, the only reason I did it this way is because I wasn't sure how to make a 2D array in C# for this that could be of undefined lengths and visible in the editor for testing purposes:
    public List<bool> rowZero = new List<bool>(); //Each list is to indicate what indices are valid encounter victory card options
    public List<bool> rowOne = new List<bool>();
    public List<bool> rowTwo = new List<bool>(); //Manually add another one of these if there is an additional character or card collection
    int rowZeroCounter = 0; //These counters determine how many valid card options are available for each character
    int rowOneCounter = 0;
    int rowTwoCounter = 0;
    //The following are all references for ui display elements:
    [SerializeField]
    private TMP_Text zeroName, zeroDesc, oneName, oneDesc, twoName, twoDesc;
    private List<CardTemplate> currentData = new List<CardTemplate>(); //Current data is used for confirming selection
    void Start()
    {
        //LOAD DECK FROM JSON FILE HERE
        InitializeBooleanLists(); //Sorts valid cards for display
        ChooseCards(); //Displays cards
    }

    private void InitializeBooleanLists() //Determines which card indices can be used for the display
    {
        //Sets all valid used database indices to true
        for (int i = 0; i < cardDatabase._cardPrefabs.BaseArray[0].Row.Length; i++)
        {
            rowZero.Add(true);
            rowZeroCounter++;
        }
        for (int i = 0; i < cardDatabase._cardPrefabs.BaseArray[1].Row.Length; i++)
        {
            rowOne.Add(true);
            rowOneCounter++;
        }
        for (int i = 0; i < cardDatabase._cardPrefabs.BaseArray[2].Row.Length; i++)
        {
            rowTwo.Add(true);
            rowTwoCounter++;
        }

        //Sets values false based upon indeces in the deck
        for (int i = 0; i < currentDeck.m_GameDeck.Count; i++)
        {
            CardData currentData = currentDeck.m_GameDeck[i];
            if (currentData.ownerIndex == 0)
            {
                rowZero[currentData.databaseIndex] = false;
                rowZeroCounter--;
            }
            else if (currentData.ownerIndex == 1)
            {
                rowOne[currentData.databaseIndex] = false;
                rowOneCounter--;
            }
            else //Index 2
            {
                rowTwo[currentData.databaseIndex] = false;
                rowTwoCounter--;
            }
        }
    }

    //Chooses three random cards to display
    public void ChooseCards()
    {
        if (rowZeroCounter == 0 && rowOneCounter == 0 && rowTwoCounter == 0) //Exits if there are no cards to choose from
        {
            EndScene();
            return;
        }
        for (int i = 0; i < 3; i++) //Chooses three cards
        {
            int randomMinion = Random.Range(0, 3);
            //Cycles index if invalid
            if (randomMinion == 0 && rowZeroCounter == 0)
            {
                randomMinion++;
            }
            else if (randomMinion == 1 && rowOneCounter == 0)
            {
                randomMinion++;
            }
            else if (randomMinion == 2 && rowTwoCounter == 0)
            {
                randomMinion = 0;
            }

            //Sets Display:
            int randomIndex = 0;
            int j = 0;
            if (randomMinion == 0)
            {
                int randomIndexPre = Random.Range(0, rowZeroCounter);
                while(rowZero[randomIndex] == false)
                {
                    randomIndex++;
                }
                for (j = 0; j < randomIndexPre; j++) //Iterates based upon random variable
                {
                    randomIndex++; //Increments once per value generated by the random
                    while(rowZero[randomIndex] == false)
                    {
                        randomIndex++; //Skips values that are false
                    }
                }
            }
            else if (randomMinion == 1)
            {
                int randomIndexPre = Random.Range(0, rowOneCounter);
                while(rowOne[randomIndex] == false)
                {
                    randomIndex++;
                }
                for (j = 0; j < randomIndexPre; j++) //Iterates based upon random variable
                {
                    randomIndex++; //Increments once per value generated by the random
                    while(rowOne[randomIndex] == false)
                    {
                        randomIndex++; //Skips values that are false
                    }
                }
            }
            else if (randomMinion == 2)
            {
                int randomIndexPre = Random.Range(0, rowTwoCounter);
                while(rowTwo[randomIndex] == false)
                {
                    randomIndex++;
                }
                for (j = 0; j < randomIndexPre; j++) //Iterates based upon random variable
                {
                    randomIndex++; //Increments once per value generated by the random
                    while(rowTwo[randomIndex] == false)
                    {
                        randomIndex++; //Skips values that are false
                    }
                }
            }
            print(randomIndex);
            print(randomMinion);
            //Sets data
            if (currentData.Count <= i) //This means the current value has never been added to currentData(first iteration)
            {
                currentData.Add(cardDatabase.GetTemplate(randomMinion, randomIndex));
            }
            else
            {   
                currentData[i] = cardDatabase.GetTemplate(randomMinion, randomIndex);
            }
            //Setting of TMP elements:
            if (i == 0)
            {
                zeroName.text = currentData[0].CardName;
                zeroDesc.text = currentData[0].CardDescription;
            }
            else if (i == 1)
            {
                oneName.text = currentData[1].CardName;
                oneDesc.text = currentData[1].CardDescription;
            }
            else if (i == 2)
            {
                twoName.text = currentData[2].CardName;
                twoDesc.text = currentData[2].CardDescription;
            }
        }
        
    }

    //Functions to choose a card to claim:
    public void ClaimZero()
    {
        currentDeck.m_GameDeck.Add(currentData[0].Data); //Adds data to deck
        EndScene();
    }

    public void ClaimOne()
    {
        currentDeck.m_GameDeck.Add(currentData[1].Data);
        EndScene();
    }

    public void ClaimTwo()
    {
        currentDeck.m_GameDeck.Add(currentData[2].Data);
        EndScene();
    }

    public void EndScene()
    {
        //Load new deck into json and close this additive scene
    }
}
